{
    "componentChunkName": "component---src-templates-blog-post-index-js",
    "path": "/blog/no-framework-is-the-best-framework/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jlozovei.dev","siteUrl":"https://jlozovei.dev"}},"markdownRemark":{"html":"<p>It’s very common for us to find a new <em>framework</em> inside the JavaScript ecosystem. Almost every day we can spot a new one (for us or a newcomer), which claims to be the solution for all of our problems.</p>\n<p>At first place, we need to know what is a <em>framework</em>: put simply, a <em>framework</em> is an abstraction to solve recurring problems using a generic solution/approach. In many places you’ll find a similar definition for <em>libraries</em>.</p>\n<p>But, the main difference between a <em>lib</em> and a <em>framework</em> is its scope. Consider <a href=\"https://reactjs.org/\">React</a> and <a href=\"https://angular.io/\">Angular</a> - the first is a library to build user interfaces; the second is a framework to build SPAs. The difference between them is their scope - inside Angular you’ll have routing, services and its <em>helpers</em>; and inside React you won’t have any of it, but only if you install other <em>libs</em> to accomplish what you want, and those libs will only do what is inside their scope.</p>\n<p>Many times we use those libs and frameworks so much that we forget what’s behind - JavaScript. And it happened to me when I was starting my career as a front-end developer. When I’ve started to develop, I used a lot <a href=\"https://getbootstrap.com/\">Boostrap</a> and <a href=\"https://jquery.com/\">jQuery</a> for everything. To build a simple page or a huge dashboard, I would put them as dependencies.</p>\n<p>And, in a specific project I had a restriction for those dependencies - and it was when I realized that I didn’t know JavaScript, but only jQuery. I knew so much the jQuery’s functions that I wasn’t able to tell if they were from jQuery or native JS. For example, to query elements on the DOM, you’d use the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or var element = jQuery('element');</span></code></pre></div>\n<p>But, this function is from jQuery, which will render the native JS code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Beyond the selectors, it will happen to add/remove classes and other attributes, event listeners, API calls, and many other cases.</p>\n<p>And that was the time when I started to really learn JS and how everything worked - I saw jQuery source code to know what all of those functions worked and how they used the JS native code, I learned about <em>clojures</em> and <em>IIFEs</em>… And, since then I started to follow the what’s inside this article’s title:</p>\n<blockquote>\n<p>No framework is the best framework.</p>\n</blockquote>\n<p>Of course, there are cases which will be easier and simpler to use a lib or a framework to solve a problem - it would save you time and effort, and we won’t rebuild the wheel every day. Have you ever thought about writing for yourself the same front-end routing code for every single project you work on? It’s not hard, but there are a few libs which do it for you, and your effort is to use them the right way.</p>\n<p>But, there will be cases in which the usage of a lib or a framework would only put unnecessary complexity in your <em>codebase</em>. I always take the example of <a href=\"https://developertitles.com/\">Developer Titles</a>: I’ve made it using <em>VanillaJS</em> (JS in its “pure form”) with <a href=\"https://webpack.js.org/\">Webpack</a> as my bundler.</p>\n<p>If I used React, or Vue, or any other <em>hype</em> my codebase would became larger and complex, it would increase the number of dependencies, increase the building time… And I see those increasings as unnecessary - our plain old JS can handle it by itself.</p>\n<p>Today I see lots of developers excited about those new tools which surrounds front-end development, but they don’t know the power and simplicity of JavaScript in its “normal” state - even so after the evolution we’re seeing after the emerge of <a href=\"https://www.w3schools.com/js/js_es6.asp\">ES6</a> on 2015.</p>\n<hr>\n<p>In the last couple of years I had the luck to know great developers - by changing my job, or going to meetups, or even knowing friends of friends. And due to this contact I’m focusing on those simple, well-written things over those projects with high complexity which solves nothing.</p>\n<p>Talking this way would seem that I condemn some tools, but I don’t. I just want to say that we, developers, should always focus on simplicity - having the <a href=\"https://github.com/dwmkerr/hacker-laws/blob/master/README.md#the-kiss-principle\">KISS Princple</a> in our heads when we’re developing.</p>\n<p>If we focus on simplicity, explicity and solving the problem, the chance of <em>overengineering</em> will decrease dramatically, and we’re creating a code that will be simple for other people maintain; even because we’re always writing code for other people, not for ourselves or machines.</p>","timeToRead":3,"frontmatter":{"date":"07/25/2020","title":"No framework is the best framework","category":"opinion","excerpt":"Set yourself free from the framework's handcuffs."},"fields":{"langKey":"en","slug":"/blog/no-framework-is-the-best-framework/"}}},"pageContext":{"id":"7d7f5320-7b74-5f7f-b2e8-a46577a61243"}},
    "staticQueryHashes": ["1946181227"]}