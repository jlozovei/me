{
    "componentChunkName": "component---src-templates-blog-post-index-js",
    "path": "/pt-br/blog/why-you-should-put-a-newline-at-the-end-of-your-code/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jlozovei.dev","siteUrl":"https://jlozovei.dev"}},"markdownRemark":{"html":"<p>Hoje é sexta-feira, último dia de sprint - dia de homologar aquilo que ficou para o último momento, e de fazer aqueles ajustes finais (se for preciso). Eis que o último build passou no CI; mas no front de homologação as requisições estão dando erro.</p>\n<p>Você abre o console do navegador, inspeciona as requisições e percebe uma regra de redirect: logo após a chamada da requisição, o retorno para a rota <code class=\"language-text\">/404</code> é instantâneo. Vendo esse comportamento, o primeiro pensamento que vem na cabeça é <em>“a URL do servidor deve estar errada”</em>.</p>\n<p>Já que o caminho dos endpoints é criado a partir de variáveis de ambiente, você coloca um <code class=\"language-text\">console.log</code> na aplicação para ver o valor dessas variáveis - se algum valor está faltando, encontraremos o problema facilmente. Mas, tudo retorna OK; pelo menos na sua máquina.</p>\n<p>Como as variáveis de ambiente são compiladas no <em>build</em>, colocamos esse <code class=\"language-text\">console.log</code> no front de homologação também, para inspecionarmos as variáveis dinâmicas. Lá, você percebe que tem um erro - uma delas retorna <code class=\"language-text\">undefined</code>, e é justamente a variável que configura o caminho dos endpoints.</p>\n<p>Achamos o que está dando errado, mas ainda não achamos a causa. Você vai até as configurações do seu CI e vê que todas as variáveis estão configuradas certas - cada uma com seu respectivo valor, e o script que irá popular elas dentro da aplicação com os valores dinâmicos não apresenta nenhum erro de sintaxe.</p>\n<p>Nesse momento você levanta da cadeira, vai pegar mais café na cozinha, volta para o computador e pensa: <em>“mas o que está acontecendo aqui!?”</em>.</p>\n<p>Depois de algum tempo, você abre o arquivo <code class=\"language-text\">.env</code> que está no seu ambiente local e não vê nenhum erro de sintaxe - todas as variáveis estão escritas corretamente, nenhuma aspas faltando… Então você abre o <code class=\"language-text\">.env</code> que está na master, para comparar as novas modificações com aquilo que já está em produção.</p>\n<p>Nisso, você percebe que o seu <code class=\"language-text\">.env</code> local não tem uma linha em branco no final (<em>newline</em>); você volta nos logs do CI e vê que tem 2 variáveis que estão concatenadas; achamos a causa!</p>\n<p>Sim, o problema era a linha em branco faltando - você adiciona ela no <code class=\"language-text\">.env</code>, faz o <em>commit</em> na branch de homologação, espera o build passar e vai testar correndo a requisição no navegador - e então ela funciona.</p>\n<hr>\n<p>Essa breve história parece aqueles causos ou cúmulos de programação, onde esquecemos um <code class=\"language-text\">;</code> ou uma <code class=\"language-text\">'</code>. Ela aconteceu comigo hoje e eu fiquei um pouco nervoso pelo fato de ter sido uma linha em branco que causou o problema.</p>\n<blockquote>\n<p>Mas, por que uma linha em branco faria diferença?</p>\n</blockquote>\n<p>Depois de arrumar o <em>bug</em>, colocar o código correto em homologação e sair para o abraço porque tudo deu certo, eu fui pesquisar sobre essa tal linha em branco, também chamada de <em>newline</em> ou <em>blank line</em>.</p>\n<h3>Explicação</h3>\n<p>Depois de algumas horas de pesquisa sobre o tema - entrei em respostas no StackOverflow, StackExchange, em blogs de tecnologia, até na Wikipedia - encontrei uma resposta convincente sobre essa questão.</p>\n<p>O meu arquivo <code class=\"language-text\">.env</code> era lido por um script <em>sh</em> (shell), e existem registros de bugs e comportamentos inesperados em algumas ferramentas de linha de comando durante a leitura de arquivos sem uma linha em branco no final. Tanto essas ferramentas quanto compiladores C podem apresentar esses comportamentos inesperados.</p>\n<p>Esses leitores (utilizados por diversas ferramentas) executam a leitura linha a linha - e a linha em branco no final do arquivo irá dizer para esse leitor quando terminar o processo de leitura.</p>\n<p>Hoje é menos comum encontrar esse tipo de problema (mas ainda é encontrado) - ferramentas novas irão interpretar a linha em branco e apenas ignorá-la. A utilização da nova linha em branco no final do arquivo é uma boa prática pois habilita a compatibilidade para essas ferramentas mais antigas.</p>\n<h3>Automatizando</h3>\n<p>Ficar colocando linhas em branco no final dos arquivos pode ser trabalhoso, e você nem deveria se preocupar com esse tipo de coisa - porque uma máquina pode fazer isso por você.</p>\n<p>Se você usa algum tipo de linter/formatter no seu projeto - eslint, prettier… - você pode configurar a regra de novas linhas, e essa responsabilidade ficará para o próprio formatter fazer.</p>\n<blockquote>\n<p>No meu computador pessoal, tenho o prettier configurado no Sublime com a “format-on-save” habilitada - cada vez que eu salvo um arquivo, ele formata automaticamente com as regras definidas.</p>\n</blockquote>\n<p>Independente da linguagem que você use, deixar uma linha vazia no final do seu código é uma boa prática que deve ser seguida - ainda mais se você trabalha com mais de uma plataforma: você escreve seu código em um Windows, e o CI que você utiliza é baseado em Linux.</p>\n<p>A utilização dela também se torna importante pois cada modificação do seu arquivo irá mudar o <em>hashsum</em> do git - se você utiliza a linha em branco no final do arquivo, ficará mais fácil de visualizar as alterações que foram feitas no final do arquivo; sem ela, o <em>diff</em> do git apenas irá mostrar que a última linha do arquivo foi alterada!</p>","timeToRead":4,"frontmatter":{"date":"06/26/2020","title":"Por que você deve usar uma nova linha no final do seu código","category":"tutorial","excerpt":"E evitar alguns comportamentos inesperados."},"fields":{"langKey":"pt-br","slug":"/pt-br/blog/why-you-should-put-a-newline-at-the-end-of-your-code/"}}},"pageContext":{"id":"e7e35394-a751-5a76-80c5-231ec87fb661"}},
    "staticQueryHashes": ["1946181227"]}