{
    "componentChunkName": "component---src-templates-blog-post-index-js",
    "path": "/pt-br/blog/publishing-packages-to-npm/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jlozovei.dev","siteUrl":"https://jlozovei.dev"}},"markdownRemark":{"html":"<p>A base do desenvolvimento JavaScript hoje é a <em>colaboração</em>, todos nós sabemos disso. Uma pessoa de um outro país pode resolver seu problema simplesmente por criar um pacote e colocá-lo no npm - e você pode fazer isso também!</p>\n<p>Quando você usa um pacote do npm no seu projeto, você tecisa ter em mente que você está utilizando o código de outra pessoa, e você espera que esse código não quebre o seu, nem roube nenhuma informação. Então, se você quer publicar um pacote no npm, você precisa seguir essa “regra”.</p>\n<blockquote>\n<p>O npm tem várias <a href=\"https://www.npmjs.com/policies\">políticas</a> para prevenir pacotes maliciosos.</p>\n</blockquote>\n<p>E também você espera que o código faça aquilo que ele diz que faz - nem menos, nem mais; seja um pacote para roteamento ou um framework completo. E como garantir isso? Com testes, obviamente!</p>\n<p>Então, nesses 3 parágrafos já encontramos algumas “regras” que precisam ser seguidas se quisermos publicar um pacote no npm. Eu digo “regras” e não <strong>regras</strong> porque elas são convenções - você pode publicar um pacote vazio sem testes também, mas, como isso vai ajudar alguém?</p>\n<h3>Pacotes publicados</h3>\n<p>Enquanto eu trabalhava na Bcredi, percebi que utilizava o mesmo pedaço de código em 3 ou 4 projetos diferentes. O mesmo código com os mesmos teste - claramente esse não é um exemplo legal do <a href=\"https://github.com/dwmkerr/hacker-laws/blob/master/translations/pt-BR.md#o-princ%C3%ADpio-dry\">Princípio DRY</a>.</p>\n<p>Se uma validação mudasse, precisaríamos trocar ela em todos os projetos, refazer os testes… Uma eterna dor de cabeça.</p>\n<p>Para resolver isso, e também como uma oportunidade de estudar sobre pacotes - antes disso, eu não tinha publicado nenhum pacote - eu decidi criar pacotes para esses códigos repetidos. Dessa forma, centralizaríamos todo o código e seus testes - se precisássemos trocar algo, faríamos apenas em um lugar, e depois atualizaríamos a versão.</p>\n<p>Os 2 pacotes são:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/@jlozovei/trim-currency\">@jlozovei/trim-currency</a></li>\n<li><a href=\"https://www.npmjs.com/package/@jlozovei/format-money\">@jlozovei/format-money</a></li>\n</ul>\n<p>Mas, antes de publicar eles de fato, precisei aprender algumas coisas.</p>\n<h3>Como publicar um pacote?</h3>\n<p>Se você criar um projeto novo usando <code class=\"language-text\">npm init -y</code>, criar um arquivo <code class=\"language-text\">index.js</code> e depois rodar <code class=\"language-text\">npm publish</code>, você poderá dizer que publicou um pacote. Mesmo se o pacote não fizer nada, ele ainda será um pacote publicado.</p>\n<p>Mas, o objetivo aqui é ajudar as pessoas, e um pacote vazio não vai ajudar ninguém.</p>\n<p>Então, como um iniciante no assunto, eu fui estudar sobre como publicar pacotes. E achei 2 links que me ajudaram muito nesse processo:</p>\n<ul>\n<li><a href=\"https://zellwk.com/blog/publish-to-npm/\">“How to publish packages to npm (the way the industry does things)”, por Zell Liew</a></li>\n<li><a href=\"https://egghead.io/courses/how-to-write-an-open-source-javascript-library\">“How to Write an Open Source JavaScript Library”, um curso do Kent C. Dodds no Egghead.io</a></li>\n</ul>\n<p>Indo direto ao ponto, depois de ver esses dois links eu aprendi vários pontos para publicar um pacote no npm. E, basicamente, todos esses pontos podem ser compilados em 4 tópicos:</p>\n<ol>\n<li>Criar o projeto</li>\n<li>Criar alguns testes</li>\n<li>Criar uma esteira de CI</li>\n<li>Semantic Versioning (versionamento semântico)</li>\n</ol>\n<h4>1. Criar o projeto</h4>\n<p>É meio óbvio, mas precisamos criar o projeto. Você pode criar um repositório na sua plataforma de VSC favorita (GitHub, Bitbucket, GitLab…) e commitar todas as modificações lá.</p>\n<p>É interessante utilizar um padrão para os seus commits, dessa forma fazer o <em>release</em> do código será muito mais fácil. Existem várias ferramentas que te ajudam nisso, como o <a href=\"https://github.com/commitizen/cz-cli\">commitizen</a> ou o <a href=\"https://github.com/conventional-changelog/conventional-changelog\">conventional-changelog</a>.</p>\n<p>Um grande ponto aqui também é dizer ao npm para ignorar alguns arquivos, utilizando o arquivo <code class=\"language-text\">.npmignore</code>. Esse arquivo será útil para evitar que alguns arquivos sejam publicados juntos como pacote, como os testes, exemplos e documentações. Quando você instala um pacote, todos os arquivos que estão no registro do npm serão baixados na sua máquina - e nós não queremos gastar conexão nem memória com esses arquivos inúteis.</p>\n<blockquote>\n<p>Dá uma olhada também no <a href=\"https://docs.npmjs.com/using-npm/developers.html\">guia do desenvolvedor npm</a>!</p>\n</blockquote>\n<h4>2. Criar alguns testes</h4>\n<p>Depois de criar seu código, você precisa garantir que ele estará apto para ser utilizado, e que ele funciona perfeitamente. Você pode utilizar várias ferramentas para criar seus testes. Eu uso muito o <a href=\"https://github.com/facebook/jest\">jest</a> porque ele é fácil e bem simples de usar.</p>\n<p>Você também pode definir o status de cobertura - isso irá informar o quanto do seu código está coberto pelos testes, e garantir que seu código é confiável. Existem várias ferramentas de cobertura de testes, e eu gosto de utilizar o <a href=\"http://codecov.io/\">codecov</a> nos meus projetos. O <em>codecov</em> vai ler o relatório de cobertura dos seus testes e irá gerar um relatório sobre essa cobertura, mostrando por onde o teste passou e por onde não passou.</p>\n<h4>3. Criar uma esteira de CI</h4>\n<p>Como desenvolvedor, eu odeio fazer trabalhos repetidos, e eu tenho certeza que você também não gosta.</p>\n<blockquote>\n<p>Deixe o trabalho repetitivo para as máquinas.</p>\n</blockquote>\n<p>Criar uma esteira de CI vai te ajudar a testar e publicar seu pacote. Existem muitas ferramentas boas de CI, como o <a href=\"https://travis-ci.org/\">Travis</a>, <a href=\"https://circleci.com/\">CircleCI</a> e a nova <a href=\"https://github.com/features/actions\">GitHub Actions</a>. Basicamente, o <code class=\"language-text\">CI</code> (<em>Continuous Integration</em>, ou Integração Contínua) é uma máquina que vai executar alguns scripts no seu projeto, para realizar os testes e fazer o deploy. Se algo der errado em alguma etapa, o CI vai te dizer onde ocorreram esses erros e parar o processo - evitando publicar código com bugs.</p>\n<h4>4. Semantic Versioning (versionamento semântico)</h4>\n<p>Versionamento semântico, abreviado <em>semver</em> é uma convenção definida para estabelecer novas versões ao seu código. Essas versões são baseadas nas modificações feitas, e são classificadas em três categorias. Por definição:</p>\n<ul>\n<li><strong>Major</strong>: uma modificação que vai quebrar o código antigo (<code class=\"language-text\">1.0.0</code> para <code class=\"language-text\">2.0.0</code>).</li>\n<li><strong>Minor</strong>: uma modificação que adiciona uma nova feature, com compatibilidade para versões antigas (<code class=\"language-text\">1.0.0</code> para <code class=\"language-text\">1.1.0</code>).</li>\n<li><strong>Patch</strong>: uma modificação que resolve um bug, com compatibilidade para versões antigas (<code class=\"language-text\">1.0.0</code> para <code class=\"language-text\">1.0.1</code>).</li>\n</ul>\n<blockquote>\n<p>Você pode aprender mais sobre <a href=\"https://semver.org/\">semver aqui</a>.</p>\n</blockquote>\n<p>Tudo isso será feito pela esteira de CI que criamos, com a ajuda de outra ferramenta. Acho que as mais famosas são o <a href=\"https://github.com/sindresorhus/np\">np</a> e <a href=\"https://github.com/semantic-release/semantic-release\">semantic-release</a>.</p>\n<p>Com o <code class=\"language-text\">np</code> você mesmo pode escolher uma nova versão; com o <code class=\"language-text\">semantic-release</code>, a nova versão será escolhida de acordo com os seus commits (com a ajuda do <code class=\"language-text\">conventional-changelog</code>).</p>\n<p>Seguindo esses 4 passos, você garante a qualidade do código e que estaremos publicando um pacote muito bem feito!</p>","timeToRead":5,"frontmatter":{"date":"04/06/2020","title":"Publicando pacotes no npm","category":"tutorial","excerpt":"Vamos publicar uns pacotes no npm!"},"fields":{"langKey":"pt-br","slug":"/pt-br/blog/publishing-packages-to-npm/"}}},"pageContext":{"id":"47c05608-181c-503e-930f-72827cd09723"}},
    "staticQueryHashes": ["1946181227"]}