{
    "componentChunkName": "component---src-templates-blog-post-index-js",
    "path": "/pt-br/blog/front-end-development-and-endurance-races/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jlozovei.dev","siteUrl":"https://jlozovei.dev"}},"markdownRemark":{"html":"<p>Desde criança eu gosto de corridas de carros. Sempre tive jogos desse tipo - como o Gran Turismo, Forza Motorsport, NFS, F1… eu também tentava seguir os torneios.</p>\n<p>Me lembro de jogar com meus primos aqueles eventos de resistência no Gran Turismo, corridas de 24h ou com 400 voltas. Nós revezávamos pra jogar, pra evitar o cansaço e também para tentar ganhar a corrida.</p>\n<p>E, me lembrando desses velhos (e bons) tempos eu penso no desenvolvimento front-end quase como um daqueles eventos de resistência - o evento é o seu projeto, o carro é o seu ferramental, e a linha de chegada é o prazo do projeto, ou a data de entrega.</p>\n<p>Se continuarmos com a metáfora, podemos ver algumas semelhanças entre os dois mundos - nós temos os desenvolvedores novatos e os experientes (assim como os pilotos), nós temos ferramentas rápidas e outras devagar (os carros), nós temos times e lideranças fortes ou fracas (as equipes), também temos as tarefas fáceis e mais complexas (assim como os circuitos), e quem ganha no final é quem tem mais equilíbrio - não o mais rápido nem o mais forte.</p>\n<p>Frameworks de front-end são como carros de corrida - temos vários deles, cada um com suas funcionalidades, comunidades e documentações. Alguns deles são bem fortes, fáceis de usar e podemos fazer quase tudo com eles - outros, em contrapardida, são devagares, difíceis de usar e podemos fazer pouca coisa com eles.</p>\n<p>Desde o surgimento do ES2015 (ES5, ES6 - sempre me perco) vimos o surgimento de vários novos frameworks JS - React, Vue, Angular, Svelte, Ember, Polymer, Meteor, Node… Existem vários, e a cada dia surge um novo (que diz que vai resolver os problemas do mundo todo). Também temos muitas coisas legais feitas com essas ferramentas; e coisas horríveis. Então, qual é a diferença entre essas coisas legais e as horríveis?</p>\n<p>Podemos apontar várias - UX, a arquitetura, o bundler, problemas de performance, suporte, até mesmo os desenvolvedores (que eu evito comparar). Mas, acredito que a principal diferença que nós podemos (e temos que) apontar é o valor entregue - o problema que foi resolvido.</p>\n<p>Se o carro é rápido, não significa que ele vai ganhar a corrida. Assim como um framework - você não vai resolver problemas e entregar valor só porque o framework que você usa é rápido ou tem uma comunidade grande. Além da capacidade do framework - o que é importante - temos que considerar o que o seu time consegue fazer com ele. Nem todo mundo consegue vencer uma corrida só porque tem uma Ferrari em mãos.</p>\n<p>Para vários usuários (a maioria deles), não importa a arquitetura que você usou, ou qual ferramenta que você usou para gerar o <em>bundle</em>. Eles se importam com o suporte, com a forma que o seu sistema se comporta no smartphone ou com uma rede ruim, eles se preocupam se vão conseguir resolver algum problema usando sua ferramenta.</p>\n<p>Outro grande ponto que podemos apontar nessa metáfora é: corridas de resistência exigem experiência, resiliência e esforço/aprendizado contínuo. Você precisa saber quando acelerar ou frear, quando tentar uma ultrapassagem, quando forçar o motor e quando parar para reabastecer… Da mesma forma você precisa saber quando usar a ferramenta X ou Y, quando acelerar seu time, quando entregar novas features ou quando removê-las…</p>\n<p>Tanto nas corridas quanto no desenvolvimento, a única forma de ganhar experiência é <strong>fazer as coisas</strong>; e isso leva tempo, porque você não vai dominar nada do dia para a noite. Cada um tem seu ritmo, então tente criar uma rotina diária para aprender algo novo, ou algo diferente.</p>\n<p>Você não ganha a corrida quando quer, mas somente quando ela acabar. E você não vai alcançar o sucesso quando quiser, mas sim quando as pessoas verem o valor que a sua ferramenta/seu app/seu sistema oferece.</p>\n<p>Eu tenho visto várias “brigas” entre desenvolvedores - um fala que <em>o React é melhor</em>, outro fala que <em>é o Vue</em>; um fala que <em>o WordPress é ruim e não vai usar</em>… Cada desenvolvedor tem suas preferências - uns gostam de React, outros de Angular; mas, a discussão certa seria <em>“você consegue entregar valor usando essas ferramentas?”</em>.</p>\n<p>Eu tenho minhas preferências, e elas mudam (bastante) durante o tempo; sempre tento não ficar parado com apenas uma tecnologia, ou ficar muito acomodado com uma ferramenta em especial. Nos últimos anos meu <em>mantra</em> é: <em>“quanto mais simples, melhor”</em>.</p>\n<p>O desenvolvimento de software é feito pra ser simples - se não é, tem algo errado. Eu não estou falando sobre a complexidade de uma linguagem, ou de uma arquitetura - estou falando sobre fazer coisas bem feitas, que resolvem problemas.</p>\n<p>Então, falando sobre ferramentas, uma boa dica que eu posso dar é <em>escolha a que melhor se encaixa na sua necessidade</em>. Se é React, vá em frente; se é Vue, vá em frente… Não tente fazer escolhas baseadas em opiniões alheias, ou baseada em um blog post que mostra resultados maravilhosos. Não existe nenhuma <em>bala de prata</em>.</p>\n<p>Quando um piloto precisa conhecer o carro, ele vai testá-lo; quando você vai comprar um carro, você vai testá-lo; e quando você está escolhendo uma ferramenta, você também precisa testá-la.</p>\n<p>Uma forma legal para testar ferramentas é criar <em>POCs</em> - ou <em>Prova de Conceito</em>. Se você não está familiarizado com isso, basicamente fazer uma POC é criar a parte mais crítica do seu projeto, usando o maior número de possibilidades. Depois de fazer isso, você chegará a um veredíto sobre qual é o melhor caminho para seguir.</p>\n<p>Quando você fizer uma POC, anote tudo o que você observar - performance, tempo de scripting, tempo de build, a dificuldade durante as tarefas, como foi a configuração do projeto… E, no final, veja qual alternativa melhor se encaixa no que você precisa fazer. Não tem segredo!</p>\n<p>Fazendo isso, você irá garantir que está seguindo o melhor caminho, fazendo as coisas certas e, ao seu lado, você terá uma grande possibilidade de ganhar a corrida!</p>","timeToRead":4,"frontmatter":{"date":"04/26/2020","title":"Desenvolvimento front-end e corridas de resistência","category":"thoughts","excerpt":"Desenvolvimento front-end é bem parecido com uma corrida de carros; deixa eu te mostrar o motivo."},"fields":{"langKey":"pt-br","slug":"/pt-br/blog/front-end-development-and-endurance-races/"}}},"pageContext":{"id":"8c8637b9-8fa0-59e3-bd19-2df28f419dd2"}},
    "staticQueryHashes": ["1946181227"]}